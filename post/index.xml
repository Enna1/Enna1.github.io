<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog - Enna1's website</title><link>https://enna1.github.io/post/</link><description>Recent content in Blog on Enna1's website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://enna1.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Inside AddressSanitizer Allocator</title><link>https://enna1.github.io/post/inside-asan-allocator/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/inside-asan-allocator/</guid><description>&lt;p>本文深入分析了 AddressSanitizer Allocator 的实现。&lt;/p></description></item><item><title>Strict Aliasing, TBAA and TypeSanitizer</title><link>https://enna1.github.io/post/strict_aliasing-tbaa-and-type_sanitizer/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/strict_aliasing-tbaa-and-type_sanitizer/</guid><description>&lt;p>本文首先介绍了 C++ 中的 strict aliasing rule，然后深入分析编译器是如何利用 strict aliasing rule 对程序进行分析优化的，之后介绍了检测 strict aliasing violation 的动态分析工具 TypeSanitizer，最后介绍如何在编程时避免写出 strict aliasing violation 的代码。&lt;/p></description></item><item><title>Dissecting ThreadSanitizer Algorithm</title><link>https://enna1.github.io/post/dissecting-thread-sanitizer/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/dissecting-thread-sanitizer/</guid><description>&lt;p>本文深入剖析 ThreadSanitizer(V2) 检测 Data Race 背后的算法原理。&lt;/p></description></item><item><title>How Sanitizer Get Stack Trace</title><link>https://enna1.github.io/post/how-sanitizer-get-stacktrace/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-get-stacktrace/</guid><description>&lt;p>本文以 ASan 为例分析 sanitizer runtime 是如何获取和保存 stack trace 的。&lt;/p></description></item><item><title>How Sanitizer Interceptor Works</title><link>https://enna1.github.io/post/how-sanitizer-interceptor-works/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-interceptor-works/</guid><description>&lt;p>本文分析了 sanitizer 是如何做到替换 malloc, free, memcpy 这些库函数的实现的。即 sanitizer 中的 interceptor 机制。&lt;/p></description></item><item><title>How Sanitizer Runtime Initialized</title><link>https://enna1.github.io/post/how-sanitizer-runtime-init/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-runtime-init/</guid><description>&lt;p>本文分析了 sanitizer runtime 是如何做到在程序启动之前进行初始化的。&lt;/p></description></item><item><title>GWP-ASan Internals</title><link>https://enna1.github.io/post/gwp-asan-internals/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/gwp-asan-internals/</guid><description>&lt;p>本文深入剖析 GWP-ASan 这一概率性内存错误检测工具的原理。&lt;/p></description></item><item><title>How To Write A Dumb Sanitizer</title><link>https://enna1.github.io/post/dumb-sanitizer-howto/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/dumb-sanitizer-howto/</guid><description>&lt;p>本文描述了如何实现一个简单的 sanitizer 。&lt;/p></description></item><item><title>A Tree Clock Data Structure for Causal Orderings in Concurrent Executions</title><link>https://enna1.github.io/post/treeclock_asplos22/</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/treeclock_asplos22/</guid><description>&lt;p>本文是对 &lt;a href="https://dl.acm.org/doi/pdf/10.1145/3503222.3507734">A Tree Clock Data Structure for Causal Orderings in Concurrent Executions (ASPLOS’22)&lt;/a> 这篇论文的学习笔记。&lt;/p>
&lt;p>个人感觉这篇文章非常精妙，提出了 tree clock 这种数据结构来替代目前 Data Race 检测算法中广泛使用的数据结构 vector clock，极大的改善了计算 happen-before 关系时的时间复杂度。&lt;/p></description></item><item><title>FastTrack: efficient and precise dynamic race detection</title><link>https://enna1.github.io/post/fasttrack_pldi09/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/fasttrack_pldi09/</guid><description>&lt;p>根据 &lt;a href="http://goo.gl/FPVd8">AddressSanitizer, ThreadSanitizer, and MemorySanitizer: Dynamic Testing Tools for C++ (GTAC'2013)&lt;/a>，TSan V2 使用的 fast happens-before 算法，&lt;strong>类似&lt;/strong>于 FastTrack(PLDI'09) 中提出的算法。&lt;/p>
&lt;p>本文是对 &lt;a href="https://users.soe.ucsc.edu/~cormac/papers/pldi09.pdf">FastTrack: efficient and precise dynamic race detection (PLDI'09)&lt;/a> 这篇论文的学习笔记。&lt;/p></description></item><item><title>Exploiting Superword Level Parallelism with Multimedia Instruction Sets</title><link>https://enna1.github.io/post/slp-vectorizer_pldi00/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/slp-vectorizer_pldi00/</guid><description>&lt;p>本文是论文&lt;a href="https://groups.csail.mit.edu/cag/slp/SLP-PLDI-2000.pdf">《Exploiting Superword Level Parallelism with Multimedia Instruction Sets》&lt;/a>的阅读笔记。论文提出一种称作 SLP 的向量化技术，作者是 Samuel Larsen 和 Saman Amarasinghe ，发表在 PLDI'2000。&lt;/p></description></item></channel></rss>