<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enna1's website</title><link>https://enna1.github.io/</link><description>Recent content on Enna1's website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://enna1.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Strict Aliasing, TBAA and TypeSanitizer</title><link>https://enna1.github.io/post/strict_aliasing-tbaa-and-type_sanitizer/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/strict_aliasing-tbaa-and-type_sanitizer/</guid><description>&lt;p>本文首先介绍了 C++ 中的 strict aliasing rule，然后深入分析编译器是如何利用 strict aliasing rule 对程序进行分析优化的，之后介绍了检测 strict aliasing violation 的动态分析工具 TypeSanitizer，最后介绍如何在编程时避免写出 strict aliasing violation 的代码。&lt;/p></description></item><item><title>Ep 4. 职场新人进化篇</title><link>https://enna1.github.io/podcast/episod-4/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/podcast/episod-4/</guid><description>&lt;p>这一期我们要一起聊一聊职场新人 &amp;amp; 职场发展。&lt;/p></description></item><item><title>Dissecting ThreadSanitizer Algorithm</title><link>https://enna1.github.io/post/dissecting-thread-sanitizer/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/dissecting-thread-sanitizer/</guid><description>&lt;p>本文深入剖析 ThreadSanitizer(V2) 检测 Data Race 背后的算法原理。&lt;/p></description></item><item><title>How Sanitizer Get Stack Trace</title><link>https://enna1.github.io/post/how-sanitizer-get-stacktrace/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-get-stacktrace/</guid><description>&lt;p>本文以 ASan 为例分析 sanitizer runtime 是如何获取和保存 stack trace 的。&lt;/p></description></item><item><title>Ep 3. 高考记</title><link>https://enna1.github.io/podcast/episod-3/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/podcast/episod-3/</guid><description>&lt;p>这一期我们要一起聊一聊高考的那些事。&lt;/p></description></item><item><title>How Sanitizer Interceptor Works</title><link>https://enna1.github.io/post/how-sanitizer-interceptor-works/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-interceptor-works/</guid><description>&lt;p>本文分析了 sanitizer 是如何做到替换 malloc, free, memcpy 这些库函数的实现的。即 sanitizer 中的 interceptor 机制。&lt;/p></description></item><item><title>How Sanitizer Runtime Initialized</title><link>https://enna1.github.io/post/how-sanitizer-runtime-init/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/how-sanitizer-runtime-init/</guid><description>&lt;p>本文分析了 sanitizer runtime 是如何做到在程序启动之前进行初始化的。&lt;/p></description></item><item><title>Ep 2. 你好，我的博士生活</title><link>https://enna1.github.io/podcast/episod-2/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/podcast/episod-2/</guid><description>&lt;p>这一期我们要一起聊一聊博士生活中的那些事。&lt;/p></description></item><item><title>Ep 1. 聊聊大学、研究生和工作生活</title><link>https://enna1.github.io/podcast/episod-1/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/podcast/episod-1/</guid><description>&lt;p>这一期我们要一起聊聊上学和工作的那些事。&lt;/p></description></item><item><title>How To Write A Dumb Sanitizer</title><link>https://enna1.github.io/post/dumb-sanitizer-howto/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://enna1.github.io/post/dumb-sanitizer-howto/</guid><description>&lt;p>本文描述了如何实现一个简单的 sanitizer 。&lt;/p></description></item><item><title>Archives</title><link>https://enna1.github.io/archives/</link><pubDate>Fri, 26 Jun 2020 23:35:07 +0800</pubDate><guid>https://enna1.github.io/archives/</guid><description/></item><item><title>About</title><link>https://enna1.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://enna1.github.io/about/</guid><description> Software Engineer at ByteDance Compiler based Program Analysis and Optimization</description></item></channel></rss>